"""
Django settings for user_repo project.

Generated by 'django-admin startproject' using Django 2.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/2.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.0/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '7wicu!$e-v!th%%tbz$$&v&w^w8rpwh@d&72p&u4dwa(@ama4r'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True#os.environ['DEBUG'] == 'False'

ALLOWED_HOSTS = ["*",'kraft-users.appspot.com/',]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    'user_management',
    'rest_framework.authtoken',
    'rest_framework_swagger',
    'rest_framework_simplejwt.token_blacklist',
    'rest_framework_simplejwt',
    'recipes_sample',
    # 'recipe_api',

    # 'firebase_auth',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'user_repo.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'user_repo.wsgi.application'

# AUTH_USER_MODEL = "user_management.UserProfile"
# Database
# https://docs.djangoproject.com/en/2.0/ref/settings/#databases
#if os.getenv('SERVER_SOFTWARE', '').startswith('Google App Engine'):
#    DATABASES = {
#        'default': {
#            'ENGINE': 'django.db.backends.postgresql_psycopg2',
#            'HOST': '/cloudsql/brain-sandbox:us-central1:customers',
#            'NAME': 'kraft_user',
#            'USER': 'kraftuser',
#            'PASSWORD': 'kraft@2010',
#        }
#    }
#else:

    # DATABASES = {
    #     'default': {
    #         'ENGINE': 'django.db.backends.postgresql_psycopg2',
    #         'NAME': 'kraft_firebase',
    #         'USER': 'kraft_dpms',
    #         'PASSWORD': 'kraft@2010',
    #         'HOST': 'localhost',
    #         'PORT': '5432',
    #     }
    # }
#
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/2.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, "media")

STATIC_ROOT = os.path.join(BASE_DIR,'static_dev')
# print ("????????????????????????????",BASE_DIR)
# print (">>>>>>>>>>>>>>>>>>>>>>>>>>>>>",STATIC_ROOT)

#STATIC_ROOT ="/Users/DiNeSh/Desktop/user_repo3/static_dev"
STATICFILES_DIRS = (os.path.join(BASE_DIR, "user_repo/static"),)

# STATICFILES_DIRS = [
#   # TODO: configure the name and path to your development static directory
#     os.path.join(BASE_DIR, 'static_dev'),
# ]




# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.0/howto/static-files/

STATIC_URL = '/static/'


REST_FRAMEWORK = {
    'DEFAULT_PERMISSION_CLASSES':[],
     #   (
    #    'rest_framework.permissions.IsAuthenticated',
   # ),

    'DEFAULT_AUTHENTICATION_CLASSES':[],
        #(
        #'rest_framework_jwt.authentication.JSONWebTokenAuthentication',
       # 'rest_framework.authentication.BasicAuthentication',
       # 'rest_framework.authentication.SessionAuthentication',
      #  'user_management.backends.JWTAuthentication',
        # 'user_management.authentication.Firebaseuthentication',
   # ),
    'TEST_REQUEST_DEFAULT_FORMAT': 'json',
    'TEST_REQUEST_RENDERER_CLASSES': (
        'rest_framework.renderers.MultiPartRenderer',
        'rest_framework.renderers.JSONRenderer',
        'rest_framework.renderers.TemplateHTMLRenderer'
    )
}


FIREBASE_AUTH = {
    'FIREBASE_ACCOUNT_KEY_FILE': os.path.join(BASE_DIR, 'ADMIN_CREDENTIALS.json'),
}




EMAIL_USE_TLS = True
EMAIL_HOST = 'smtp.gmail.com'
EMAIL_HOST_USER = 'youremail@gmail.com'
EMAIL_HOST_PASSWORD = 'yourpassword'
DEFAULT_FROM_EMAIL = "youremail@gmail.com"
EMAIL_PORT = 587

VERIFICATION_KEY_EXPIRY_DAYS = 2

SITE_NAME = "KRAFT USERS"